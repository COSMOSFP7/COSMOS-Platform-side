/**
  Copyright (C) 2016 ATOS
 
    This file is part of BCEP.

    BCEP is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BCEP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BCEP.  If not, see <http://www.gnu.org/licenses/>.
 
  Authors:
  ATOS ARI
  
 */


/*!
	Types for the Execution Framework
	
*/
#ifndef _SOL_CEP_ENGINE_TYPES_COMPLEX_EVENT_H_
#define _SOL_CEP_ENGINE_TYPES_COMPLEX_EVENT_H_

///#include <time.h>
#include "EProgram.h"
#include "../../../Types/TValue.h"

struct EPayloadAttribute;
struct EDetectionTree;
struct EComplexEventFunction;
struct ECapturedEventPool;
struct EEventAttribute;
struct EEvent;
struct EExternal;


struct EComplexEvent
{
	EComplexEvent() : oid(-1L)
					, name(0) 
					, payloadAttributes(0)
					, whereClause(0)
					, detectionTree(0)
					, complexEventFunctions(0)
					, groupAttributeOid(-1L)
					, windowType(noWindow)
					, duration(0)
					, tupleCount(0)
					, tupleEvent(0)
					, capturedEventPool(0)
					, durationExt(0)
					, tupleCountExt(0)
					, recurringTimeExt(0)
					, prev(0)
                                        , rejectedInStack(0)  ///RP: 16022015
                                        , rejectedToStack(0)
                                        , tape(0)
	{}

	enum TWindowType
	{
		fixed,
		sliding,
		tuple,
		noWindow
	};
	
	//!@{
	//! Build time attributes
	long oid;	//! Internal id generated by Framework builder.
	char* name;	//! External name
	EPayloadAttribute* payloadAttributes;	
	EProgram* whereClause;
	EDetectionTree* detectionTree;
	EComplexEventFunction* complexEventFunctions;
	
	long groupAttributeOid; //! OID of event attribute used for grouping
	
	TWindowType windowType;
	TTimeLiteral recurringTime; //! usage depends on windowType
	time_t duration;	//! usage depends on windowType
	int tupleCount;		//! usage depends on windowType
	
	EEvent* tupleEvent; //! Event for which we count the Tuples. 
	//!@}
	
	
	//!@{
	//! Runtime attributes
	/*
		Placeholder for live results of the complex
		event function evaluations 
		FIXME: to be implemented. 
	*/
	//EComplexEventFunction* complexEventResults;

	//! Captured events
	ECapturedEventPool* capturedEventPool;
	
	// runtime - external vars.
	//  if != null, must resolve their counterpart (w/o the "Ext" suffix)
	//   e.g. durationExt -> duration
	EExternal* durationExt;
	EExternal* tupleCountExt;
	EExternal* recurringTimeExt;
	//!@}
	
	//LL
	EComplexEvent* prev;
        
 ///RP: used to tuple win
        int rejectedInStack;  ///RP: 16022015
        int rejectedToStack;
        unsigned long long tape;
        
};
#endif
